#!/usr/bin/python -O
#coding:utf8
__doc__ = 'Sdp entry file, all the start.'

try:
    import sys,os
    from Core.Public import Sysinfo,Time,Precheck,genuserinfo
    from Core.Config import LANG,WEBS,APPS,SERVICES
    from Core.Handler import StartAll
    from Core import __version__
    from optparse import OptionParser
    from optparse import OptionGroup
except ImportError as errmsg:
    raise ImportError("import module failed, because %s" % errmsg)

def SdpCloudRun(**kwargs):
    reload(sys)
    sys.setdefaultencoding(LANG)
    if not isinstance(kwargs, (dict)):
        raise('Bad Parameter, ask dict.')

    if kwargs['service'] in WEBS:
        StartAll('WEB', **kwargs)
    elif kwargs['service'] in APPS:
        StartAll('APP', **kwargs)
    else:
        print "\033[0;31;40mError,Quit!!!\033[0m"
        sys.exit(3)

def SOA():
    usage = """
    user time service email code,
    -u/--user, -t/--time, -s/--service, -e/--email, <svn> [arg], <git> [arg]"""

    parser = OptionParser(usage=usage)
    parser.add_option('-u', '--user', dest='user', help='User name')
    parser.add_option("-t", "--time", type='int', dest='time', default=1, help="User service usage month")
    parser.add_option('-s', '--service', dest='service', help='User service type, now support: %s' % str(SERVICES))
    parser.add_option('-e', '--email', dest='email', help='User email')
    parser.add_option("-v", "--version", action="store_false", dest="version", default=__version__, help="Show the Sdp version information and quit")

    svn_group = OptionGroup(parser, "Svn Options")
    parser.add_option_group(svn_group)
    svn_group.add_option('--svntype', action="store_true", dest='svn_type', help="svn option, svn type for none, http, https")

    git_group = OptionGroup(parser, "Git Options")
    parser.add_option_group(git_group)
    git_group.add_option('--enable', action="store_true", dest='git_enable', help="Enable git support")

    (options, args) = parser.parse_args()
    #print parser.parse_args()
    #print "options:%s, args:%s" %(options, args)
    if options.version != __version__:
        print __version__

if __name__== '__main__':
    SOA()

    try:

        if os.geteuid() != 0:
            print "\033[0;31;40mAborting:this program must be run as root.\033[0m"
            sys.exit(1)
        else:
            user = genuserinfo()
            Precheck(**user).checkargs()
            SdpCloudRun(**user)
            print """\033[0;32;40mUser(%s, %s, %s) build sucessfully.
    CreateTime      => %s
    ExpireTime      => %s
    Hostname        => %s
    Sdp Version     => %s
    Kernel Version  => %s
    CPUs            => %d
    Memory Free     => %s
    Memory Usage    => %s\033[m"""%(user['name'], user['email'], user['service'], Time(), Time(user['time']), Sysinfo.Hostname,  __version__.split()[1], Sysinfo.Kernel, Sysinfo.CPUs, Sysinfo.mem_free, Sysinfo.MemPerc)

    except KeyboardInterrupt:
        print "捕获到终止信号，程序非正常退出!"
        exit(1)

    except IOError as e:
        raise IOError('System IO Error, %s' % e)

    except EOFError as e:
        raise EOFError('意外终止, %s' % e)
